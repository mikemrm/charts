---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-config
data:
  nginx.conf: |
    {{- if .Values.otel.enabled }}
    load_module modules/ngx_otel_module.so;
    {{- end }}

    user  nginx;
    worker_processes  auto;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        {{- with .Values.otel }}
        {{- if .enabled }}
        otel_exporter {
            endpoint    {{ or .endpoint (fail "otel.endpoint required") }};
            interval    {{ .interval }};
            batch_size  {{ .batchSize }};
            batch_count {{ .batchCount }};
        }

        otel_trace          on;
        otel_trace_context  {{ .context }};
        otel_service_name   {{ .serviceName | default $.Release.Name | quote }};

        {{- with .spanName }}
        otel_span_name      {{ quote . }};
        {{- end }}
        {{- range $name, $value := .spanAttributes }}
        otel_span_attr      {{ quote $name }} {{ quote $value }};
        {{- end }}

        {{- end }}
        {{- end }}

        map $host$request_uri $redir_to {
            default "not-found";
        {{- range $src, $dst := .Values.redirects }}
        {{- if hasPrefix "^" $src }}
            {{ printf "~%s" $src | quote }} {{ quote $dst }};
        {{- end }}
        {{- end }}
        }

        map $host $redir_host_to {
            default "not-found";
        {{- range $src, $dst := .Values.redirects }}
        {{- if not (hasPrefix "^" $src) }}
            {{ quote $src }} {{ quote $dst }};
        {{- end }}
        {{- end }}
        }

        server {
            listen 80;

            {{- range .Values.proxy_real_ip_from }}
            set_real_ip_from {{ quote . }};
            {{- end }}

            location / {
                resolver {{ .Values.resolver }} valid=30s;

              if ($redir_to != "not-found") {
                  return 301 $redir_to;
              }

              if ($redir_host_to != "not-found") {
                  return 301 $redir_host_to;
              }

              return 404;
            }
        }

        include /etc/nginx/conf.d/*.conf;
    }
